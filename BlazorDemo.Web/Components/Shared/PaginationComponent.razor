@typeparam TItem

<div class="container-sm">
    @ItemContent(Items.ElementAt(selectedIndex))
</div>

<nav aria-label="Pagination Functionality">
    <ul class="pagination pagination-lg justify-content-center">
        <li class="page-item @(previousDisabled ? "disabled" : "")" disabled="@previousDisabled">
            <a class="page-link" @onclick="@(() => SetIndex(0))">
                <span>&#9668;</span>
            </a>
        </li>
        <li class="page-item @(previousDisabled ? "disabled" : "")" disabled="@previousDisabled">
            <a class="page-link" @onclick="DecrementIndex">
                <span>&lArr;</span>
            </a>
        </li>

        @foreach ((int index, TItem item) in Items.Select((item, index) => (index, item)))
        {
            var isActive = index == selectedIndex;

            <li class="page-item @(isActive ? "active" : "")">
                <a class="page-link" @onclick="@(() => SetIndex(index))">
                    @ItemLabel(item)
                </a>
            </li>
        }

        <li class="page-item @(nextDisabled ? "disabled" : "")" disabled="@nextDisabled">
            <a class="page-link" @onclick="IncrementIndex">
                <span>&rArr;</span>
            </a>
        </li>
        <li class="page-item @(nextDisabled ? "disabled" : "")" disabled="@nextDisabled">
            <a class="page-link" @onclick="@(() => SetIndex(Items.Count - 1))">
                <span>&#9658;</span>
            </a>
        </li>
    </ul>
</nav>

@code {
    [Parameter, EditorRequired]
    public required List<TItem> Items { get; set; }

    [Parameter, EditorRequired]
    public required RenderFragment<TItem> ItemContent { get; set; }

    [Parameter, EditorRequired]
    public required Func<TItem, MarkupString> ItemLabel { get; set; }

    private int selectedIndex;

    private bool previousDisabled => selectedIndex == 0;
    private bool nextDisabled => selectedIndex == Items.Count - 1;

    private void IncrementIndex() => selectedIndex++;
    private void DecrementIndex() => selectedIndex--;
    private void SetIndex(int index) => selectedIndex = index;

    protected override void OnInitialized() => selectedIndex = Items.Count - 1;
}