@page "/checkout"
@rendermode InteractiveServer

@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@implements IDisposable

<div class="checkout-container">
    <EditForm Model=Order.DeliveryAddress OnValidSubmit=PlaceOrder>
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review Order</h4>

                <OrderReview Order="Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>

                @if (isError)
                {
                    <div class="alert alert-danger">Please enter a name and address.</div>
                }

                <AddressEditor Address="Order.DeliveryAddress" />
            </div>
        </div>
        <button disabled="@isError" type="submit" class="checkout-button btn btn-warning">Place Order</button>

        <DataAnnotationsValidator />
    </EditForm>

</div>

@code {
    private Order Order => OrderState.Order;
    private bool isError = false;
    private EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new(Order.DeliveryAddress);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        isError = !editContext.Validate();

        StateHasChanged();
    }

    private void ShowError()
    {
        isError = true;
    }

    private async Task PlaceOrder()
    {
        var response = await HttpClient.PostAsJsonAsync($"{NavigationManager.BaseUri}orders", OrderState.Order);
        var newOrderId = await response.Content.ReadFromJsonAsync<int>();

        OrderState.ResetOrder();

        NavigationManager.NavigateTo("/myorders");
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }
}