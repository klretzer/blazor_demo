@page "/myorders"
@rendermode InteractiveServer

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="orders-container">
    @if (ordersWithStatus == null)
    {
        <text>Loading...</text>
    }
    else if (!ordersWithStatus.Any())
    {
        <div class="no-orders">
            <h2>No orders placed.</h2>
            <a class="order-btn btn btn-success">Order pizza!</a>
        </div>
    }
    else
    {
        <PaginationComponent TItem="OrderWithStatus"
            Items="ordersWithStatus.OrderBy(o => o.Order.CreatedTime).ToList()"
            ItemLabel='item => new($"{item.Order.CreatedTime:ddd, MMM. d, yyyy}")'>

            <ItemContent>
                <div class="order-header bg-secondary text-white">
                    <div class="col">
                        <h5>@($"{context.Order.CreatedTime:dddd, MMMM d, yyyy hh:mm tt}")</h5>
                        Items: <strong>@($"{context.Order.Pizzas.Count}")</strong>

                        <div class="col">
                            Status: <strong>@context.StatusText</strong>
                        </div>
                    </div>

                    @if (@context.StatusText != "Delivered")
                    {
                        <div class="details-btn col flex-grow-0">
                            <a href="myorders/@context.Order.OrderId" class="btn btn-success">Track</a>
                        </div>
                    }
                </div>
                <div class="list-group-item order-list">
                    <div class="col">
                        <OrderReview Order="@context.Order" />
                    </div>
                </div>
            </ItemContent>
        </PaginationComponent>
    }
</div>

@code {
    private List<OrderWithStatus>? ordersWithStatus;

    protected override async Task OnParametersSetAsync()
    {
        ordersWithStatus = await HttpClient.GetFromJsonAsync<List<OrderWithStatus>>($"{NavigationManager.BaseUri}orders") ?? new();
    }
}