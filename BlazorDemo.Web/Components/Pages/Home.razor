@page "/"
@rendermode InteractiveServer

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject OrderState OrderState
@inject IJSRuntime JavaScript

<ul class="pizza-cards">
    @if (specials != null)
    {
        @foreach (var special in specials)
        {
            <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                <div class="pizza-info">
                    <span class="title">@special.Name</span>
                    @special.Description
                    <span class="price">@special.GetFormattedBasePrice()</span>
                </div>
            </li>
        }
    }
</ul>

@if (OrderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog
        Pizza="OrderState.ConfiguringPizza"
        OnCancel="OrderState.CancelConfigurePizzaDialog"
        OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order:</h2>

            @foreach (var pizza in order.Pizzas)
            {
                <div class="cart-item">
                    <span class="text-danger delete-item" aria-hidden="true"
                    @onclick="@(async () => await RemovePizzaConfirmation(pizza))">
                        &times;
                    </span>
                    <div class="title">@(pizza.Size)" @pizza.Special?.Name</div>
                    <div class="item-price">
                        @pizza.GetFormattedTotalPrice()
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br />to get started.</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">Order</a>
    </div>
</div>

@code {
    private List<PizzaSpecial> specials = new();
    private Order order => OrderState.Order;

    private async Task RemovePizzaConfirmation(Pizza pizza)
    {
        var msgParams = new
        {
            title = "Remove Pizza?",
            text = $"Remove the '{pizza.Special!.Name}' from your order?",
            icon = "warning",
            buttons = new
            {
                abort = new { text = "No, keep it in my order.", value = false },
                confirm = new { text = "Yes, remove pizza.", value = true }
            }
        };

        if (await JavaScript.InvokeAsync<bool>("swal", msgParams))
        {
            OrderState.RemoveConfiguredPizza(pizza);
        }
    }

    protected override async Task OnInitializedAsync() => specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>($"{NavigationManager.BaseUri}specials") ?? new();
}